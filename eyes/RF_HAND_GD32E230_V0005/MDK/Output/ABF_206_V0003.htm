<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\ABF_206_V0003.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\ABF_206_V0003.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6130100: Last Updated: Mon Apr 17 14:36:26 2023
<BR><P>
<H3>Maximum Stack Usage =        320 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Listen_Task0 &rArr; Test_Order_Process &rArr; Device_Data_Write &rArr; Adc_ReInit &rArr; Adc_Config &rArr; Delay_ms &rArr; Delay_us &rArr; timer_counter_read
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[11]">ADC_CMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">ADC_CMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">ADC_CMP_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[e]">DMA_Channel0_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[f]">DMA_Channel1_2_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[10]">DMA_Channel3_4_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[9]">FMC_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from gd32e23x_it.o(.text.HardFault_Handler) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[20]">I2C0_ER_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[1a]">I2C0_EV_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[21]">I2C1_ER_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[1b]">I2C1_EV_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[26]">KeyPower_CallBack</a> from key_app.o(.text.KeyPower_CallBack) referenced from key_app.o(.text.Key_App_Init)
 <LI><a href="#[7]">LVD_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[2a]">Listen_Task0</a> from task_app.o(.text.Listen_Task0) referenced from task_app.o(.data.Task_Arr)
 <LI><a href="#[1]">NMI_Handler</a> from gd32e23x_it.o(.text.NMI_Handler) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[2b]">Out_Task1</a> from task_app.o(.text.Out_Task1) referenced from task_app.o(.data.Task_Arr)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[a]">RCU_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[25]">Read_KeyPower_Level</a> from drv_key.o(.text.Read_KeyPower_Level) referenced from key_app.o(.text.Key_App_Init)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[1c]">SPI0_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[1d]">SPI1_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[27]">SensorCharge_Read</a> from drv_sensor.o(.text.SensorCharge_Read) referenced from drv_sensor.o(.text.Sensor_Init)
 <LI><a href="#[28]">SensorPPR_Read</a> from drv_sensor.o(.text.SensorPPR_Read) referenced from drv_sensor.o(.text.Sensor_Init)
 <LI><a href="#[5]">SysTick_Handler</a> from gd32e23x_it.o(.text.SysTick_Handler) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[2c]">Sys_Task2</a> from task_app.o(.text.Sys_Task2) referenced from task_app.o(.data.Task_Arr)
 <LI><a href="#[23]">SystemInit</a> from system_gd32e23x.o(.text.SystemInit) referenced from startup_gd32e23x.o(.text)
 <LI><a href="#[12]">TIMER0_BRK_UP_TRG_COM_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[13]">TIMER0_Channel_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[16]">TIMER13_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[17]">TIMER14_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[18]">TIMER15_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[19]">TIMER16_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[14]">TIMER2_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[15]">TIMER5_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[1e]">USART0_IRQHandler</a> from drv_uart.o(.text.USART0_IRQHandler) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[1f]">USART1_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[6]">WWDGT_IRQHandler</a> from startup_gd32e23x.o(.text) referenced from startup_gd32e23x.o(RESET)
 <LI><a href="#[24]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32e23x.o(.text)
 <LI><a href="#[29]">fputc</a> from drv_uart.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[22]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[24]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(.text)
</UL>
<P><STRONG><a name="[f9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[fa]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[fb]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[fc]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[fd]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[fe]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>ADC_CMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA_Channel1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER0_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e23x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>abs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, siabs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Data_Read
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Ntc_Adjust_Process
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Temp_Read
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Temp_Read
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Temp_Read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Temp_Read
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Temp_Read
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[100]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[101]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[102]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[32]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f0]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[104]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[106]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>Adc_Clock_Config</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_adc.o(.text.Adc_Clock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Adc_Clock_Config &rArr; rcu_adc_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_adc_clock_config
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[42]"></a>Adc_Config</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, drv_adc.o(.text.Adc_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Adc_Config &rArr; Delay_ms &rArr; Delay_us &rArr; timer_counter_read
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_special_function_config
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_source_config
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_external_trigger_config
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_dma_mode_enable
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_data_alignment_config
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_length_config
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_calibration_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_ReInit
</UL>

<P><STRONG><a name="[4e]"></a>Adc_DeInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_adc.o(.text.Adc_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Adc_DeInit &rArr; adc_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Data_Write
</UL>

<P><STRONG><a name="[51]"></a>Adc_Dma_Config</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, drv_adc.o(.text.Adc_Dma_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Adc_Dma_Config &rArr; dma_init &rArr; dma_channel_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_enable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_ReInit
</UL>

<P><STRONG><a name="[55]"></a>Adc_Gpio_Config</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, drv_adc.o(.text.Adc_Gpio_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Adc_Gpio_Config &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
</UL>

<P><STRONG><a name="[57]"></a>Adc_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_adc.o(.text.Adc_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Adc_Init &rArr; Adc_Config &rArr; Delay_ms &rArr; Delay_us &rArr; timer_counter_read
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Gpio_Config
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Dma_Config
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Config
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Clock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>Adc_ReInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_adc.o(.text.Adc_ReInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Adc_ReInit &rArr; Adc_Config &rArr; Delay_ms &rArr; Delay_us &rArr; timer_counter_read
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Dma_Config
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Data_Write
</UL>

<P><STRONG><a name="[5e]"></a>Bat_Led_Full_Breathe</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, drv_led.o(.text.Bat_Led_Full_Breathe))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bat_Led_Full_Breathe &rArr; timer_channel_output_pulse_value_config
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_charge_bat_leds_disp
</UL>

<P><STRONG><a name="[5c]"></a>Bat_Led_Full_Control</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drv_led.o(.text.Bat_Led_Full_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bat_Led_Full_Control &rArr; timer_channel_output_pulse_value_config
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_leds_disp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wakeup_bat_leds_disp
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_on_bat_leds_disp
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_off_bat_leds_disp
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_charge_bat_leds_disp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_Err_leds_disp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aging_charge_disp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aging_EMS_RF_disp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Order_Process
</UL>

<P><STRONG><a name="[60]"></a>Bat_Led_Init</STRONG> (Thumb, 320 bytes, Stack size 88 bytes, drv_led.o(.text.Bat_Led_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Bat_Led_Init &rArr; timer_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_struct_para_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>Bat_Led_Low_Breathe</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, drv_led.o(.text.Bat_Led_Low_Breathe))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bat_Led_Low_Breathe &rArr; timer_channel_output_pulse_value_config
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_on_bat_leds_disp
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_charge_bat_leds_disp
</UL>

<P><STRONG><a name="[5b]"></a>Bat_Led_Low_Control</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_led.o(.text.Bat_Led_Low_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bat_Led_Low_Control &rArr; timer_channel_output_pulse_value_config
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_leds_disp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wakeup_bat_leds_disp
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_on_bat_leds_disp
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_off_bat_leds_disp
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_charge_bat_leds_disp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_Err_leds_disp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aging_charge_disp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aging_EMS_RF_disp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Order_Process
</UL>

<P><STRONG><a name="[6d]"></a>Bat_Level_Detection</STRONG> (Thumb, 392 bytes, Stack size 16 bytes, drv_power.o(.text.Bat_Level_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Bat_Level_Detection &rArr; bat_val_4v1_check
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_val_4v1_check
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_val_3v9_check
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_val_3v4_check
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_val_3v3_check
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_val_3v2_check
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Listen_Task0
</UL>

<P><STRONG><a name="[73]"></a>Bat_Temp_Read</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, drv_power.o(.text.Bat_Temp_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Bat_Temp_Read &rArr; log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Listen_Task0
</UL>

<P><STRONG><a name="[75]"></a>Delay_Init</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, drv_delay.o(.text.Delay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Delay_Init &rArr; timer_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>Delay_ms</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, drv_delay.o(.text.Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Delay_ms &rArr; Delay_us &rArr; timer_counter_read
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPower_CallBack
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_AutoOff_Process
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Config
</UL>

<P><STRONG><a name="[77]"></a>Delay_us</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, drv_delay.o(.text.Delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Delay_us &rArr; timer_counter_read
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_counter_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[79]"></a>Device_AutoOff_Process</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, device_app.o(.text.Device_AutoOff_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Device_AutoOff_Process &rArr; Sys_state_Ctrl &rArr; Device_Data_Write &rArr; Adc_ReInit &rArr; Adc_Config &rArr; Delay_ms &rArr; Delay_us &rArr; timer_counter_read
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_Leds_Force_refresh
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_state_Ctrl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Data_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Task2
</UL>

<P><STRONG><a name="[7d]"></a>Device_Data_Read</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, device_app.o(.text.Device_Data_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Device_Data_Read &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Ntc_Adjust_Process
</UL>

<P><STRONG><a name="[7b]"></a>Device_Data_Write</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, device_app.o(.text.Device_Data_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Device_Data_Write &rArr; Adc_ReInit &rArr; Adc_Config &rArr; Delay_ms &rArr; Delay_us &rArr; timer_counter_read
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Word
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_ReInit
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_state_Ctrl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Order_Process
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Device_Out_Process
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Ntc_Adjust_Process
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_AutoOff_Process
</UL>

<P><STRONG><a name="[81]"></a>Device_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, device_app.o(.text.Device_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Device_Init &rArr; Device_Data_Read &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Level_Set
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Data_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>Device_Level_Set</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, device_app.o(.text.Device_Level_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Device_Level_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPower_CallBack
</UL>

<P><STRONG><a name="[83]"></a>Device_Out_Process</STRONG> (Thumb, 564 bytes, Stack size 24 bytes, device_app.o(.text.Device_Out_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Device_Out_Process &rArr; RF_Control &rArr; RF_PWM_Config &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OutFreq_Cycle
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_ctrl_RF_time
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Start_Time
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Control
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Task1
</UL>

<P><STRONG><a name="[8c]"></a>Drv_Uart_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, drv_uart.o(.text.Drv_Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Drv_Uart_Init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_transmit_config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_dma_receive_config
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_NVIC_Config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_GPIO_Config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_DMA_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>Drv_Uart_Send</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, drv_uart.o(.text.Drv_Uart_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Drv_Uart_Send &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Order_Process
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Ntc_Adjust_Process
</UL>

<P><STRONG><a name="[af]"></a>EMS_Load_Detection</STRONG> (Thumb, 244 bytes, Stack size 4 bytes, drv_ems.o(.text.EMS_Load_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EMS_Load_Detection
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Listen_Task0
</UL>

<P><STRONG><a name="[85]"></a>Ems_Control</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, drv_ems.o(.text.Ems_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Ems_Control &rArr; Ems_PWM_Config &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ems_rf_en_change
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_PWM_OFF
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_PWM_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_state_Ctrl
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ems_rf_ctrl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Order_Process
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Device_Out_Process
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Task1
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Out_Process
</UL>

<P><STRONG><a name="[e1]"></a>Ems_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_ems.o(.text.Ems_Init))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>Ems_PWM_Config</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, drv_ems.o(.text.Ems_PWM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Ems_PWM_Config &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_struct_para_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Control
</UL>

<P><STRONG><a name="[9d]"></a>Ems_PWM_OFF</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, drv_ems.o(.text.Ems_PWM_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Ems_PWM_OFF &rArr; timer_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Control
</UL>

<P><STRONG><a name="[80]"></a>Flash_Write_Word</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, drv_flash.o(.text.Flash_Write_Word))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Flash_Write_Word &rArr; fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Data_Write
</UL>

<P><STRONG><a name="[a4]"></a>GPIO_Init</STRONG> (Thumb, 424 bytes, Stack size 56 bytes, drv_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = GPIO_Init &rArr; Gpio_Reset &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>Gpio_Reset</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, drv_gpio.o(.text.Gpio_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Gpio_Reset &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e23x_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>Key_App_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, key_app.o(.text.Key_App_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Key_App_Init &rArr; Key_Create &rArr; Add_Key
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>Key_Create</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, drv_key.o(.text.Key_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Key_Create &rArr; Add_Key
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_App_Init
</UL>

<P><STRONG><a name="[aa]"></a>Key_Hardware_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, drv_key.o(.text.Key_Hardware_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Key_Hardware_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>Key_Process</STRONG> (Thumb, 604 bytes, Stack size 48 bytes, drv_key.o(.text.Key_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Key_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan_Process
</UL>

<P><STRONG><a name="[ab]"></a>Key_Scan_Process</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_key.o(.text.Key_Scan_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Key_Scan_Process &rArr; Key_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Listen_Task0
</UL>

<P><STRONG><a name="[a6]"></a>Level_Leds_Control</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, led_app.o(.text.Level_Leds_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Level_Leds_Control &rArr; Level_Leds_Force_refresh &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_Leds_Force_refresh
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_off_bat_leds_disp
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPower_CallBack
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Led_Process
</UL>

<P><STRONG><a name="[7c]"></a>Level_Leds_Force_refresh</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, led_app.o(.text.Level_Leds_Force_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Level_Leds_Force_refresh &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_Leds_Control
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_AutoOff_Process
</UL>

<P><STRONG><a name="[2a]"></a>Listen_Task0</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, task_app.o(.text.Listen_Task0))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Listen_Task0 &rArr; Test_Order_Process &rArr; Device_Data_Write &rArr; Adc_ReInit &rArr; Adc_Config &rArr; Delay_ms &rArr; Delay_us &rArr; timer_counter_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Order_Process
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Process
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Temp_Read
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan_Process
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMS_Load_Detection
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Temp_Read
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Level_Detection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_app.o(.data.Task_Arr)
</UL>
<P><STRONG><a name="[b1]"></a>Motor_Init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, drv_motor.o(.text.Motor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Motor_Init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>Motor_Process_Cycle</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drv_motor.o(.text.Motor_Process_Cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Motor_Process_Cycle &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Task1
</UL>

<P><STRONG><a name="[86]"></a>Motor_Start_Time</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, drv_motor.o(.text.Motor_Start_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Motor_Start_Time &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_to_err_state
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPower_CallBack
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Device_Out_Process
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Out_Process
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e23x_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>Normal_mode_Charge_Ctrl</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, device_app.o(.text.Normal_mode_Charge_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Normal_mode_Charge_Ctrl &rArr; Sys_state_Ctrl &rArr; Device_Data_Write &rArr; Adc_ReInit &rArr; Adc_Config &rArr; Delay_ms &rArr; Delay_us &rArr; timer_counter_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Charge_Control
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_state_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Task2
</UL>

<P><STRONG><a name="[2b]"></a>Out_Task1</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, task_app.o(.text.Out_Task1))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Out_Task1 &rArr; Test_Mode_Device_Out_Process &rArr; test_ems_rf_ctrl &rArr; RF_Control &rArr; RF_PWM_Config &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Device_Out_Process
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Control
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Led_Process
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Process_Cycle
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Control
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Out_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_app.o(.data.Task_Arr)
</UL>
<P><STRONG><a name="[b4]"></a>Power_Charge_Control</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_power.o(.text.Power_Charge_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Power_Charge_Control &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_state_Ctrl
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_mode_Charge_Ctrl
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normal_mode_Charge_Ctrl
</UL>

<P><STRONG><a name="[b7]"></a>Power_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_power.o(.text.Power_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Power_Init &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>Power_Led_Process</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, led_app.o(.text.Power_Led_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Power_Led_Process &rArr; sys_off_bat_leds_disp &rArr; Level_Leds_Control &rArr; Level_Leds_Force_refresh &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_leds_disp
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_Aging_disp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_wakeup_bat_leds_disp
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_on_bat_leds_disp
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_off_bat_leds_disp
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_charge_bat_leds_disp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_Err_leds_disp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_Leds_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Task1
</UL>

<P><STRONG><a name="[84]"></a>RF_Control</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, drv_rf.o(.text.RF_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RF_Control &rArr; RF_PWM_Config &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PWM_OFF
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PWM_Config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ems_rf_en_change
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_state_Ctrl
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ems_rf_ctrl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Order_Process
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Device_Out_Process
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Task1
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Out_Process
</UL>

<P><STRONG><a name="[c4]"></a>RF_Freq_Set</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, drv_rf.o(.text.RF_Freq_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RF_Freq_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_OutFreq_Cycle
</UL>

<P><STRONG><a name="[c1]"></a>RF_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, drv_rf.o(.text.RF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RF_Init &rArr; RF_PWM_Config &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PWM_Config
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>RF_Ntc_Adjust_Process</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, test_app.o(.text.RF_Ntc_Adjust_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RF_Ntc_Adjust_Process &rArr; Device_Data_Write &rArr; Adc_ReInit &rArr; Adc_Config &rArr; Delay_ms &rArr; Delay_us &rArr; timer_counter_read
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_compute
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_Send
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Data_Write
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Data_Read
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Task2
</UL>

<P><STRONG><a name="[88]"></a>RF_OutFreq_Cycle</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, drv_rf.o(.text.RF_OutFreq_Cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RF_OutFreq_Cycle &rArr; RF_Freq_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Freq_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Out_Process
</UL>

<P><STRONG><a name="[bf]"></a>RF_PWM_Config</STRONG> (Thumb, 264 bytes, Stack size 88 bytes, drv_rf.o(.text.RF_PWM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = RF_PWM_Config &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_struct_para_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Control
</UL>

<P><STRONG><a name="[c0]"></a>RF_PWM_OFF</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, drv_rf.o(.text.RF_PWM_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RF_PWM_OFF &rArr; timer_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Control
</UL>

<P><STRONG><a name="[ae]"></a>RF_Temp_Read</STRONG> (Thumb, 504 bytes, Stack size 32 bytes, drv_rf.o(.text.RF_Temp_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF_Temp_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Listen_Task0
</UL>

<P><STRONG><a name="[25]"></a>Read_KeyPower_Level</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, drv_key.o(.text.Read_KeyPower_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Read_KeyPower_Level &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_app.o(.text.Key_App_Init)
</UL>
<P><STRONG><a name="[27]"></a>SensorCharge_Read</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_sensor.o(.text.SensorCharge_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SensorCharge_Read &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sensor.o(.text.Sensor_Init)
</UL>
<P><STRONG><a name="[28]"></a>SensorPPR_Read</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_sensor.o(.text.SensorPPR_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SensorPPR_Read &rArr; gpio_input_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sensor.o(.text.Sensor_Init)
</UL>
<P><STRONG><a name="[c6]"></a>Sensor_Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, drv_sensor.o(.text.Sensor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Sensor_Init &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>Sensor_Process</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, drv_sensor.o(.text.Sensor_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sensor_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Listen_Task0
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, gd32e23x_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>Sys_Task2</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, task_app.o(.text.Sys_Task2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Sys_Task2 &rArr; bat_val_err_check &rArr; Sys_state_Ctrl &rArr; Device_Data_Write &rArr; Adc_ReInit &rArr; Adc_Config &rArr; Delay_ms &rArr; Delay_us &rArr; timer_counter_read
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_temp_err_check
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_counter_reload
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_val_err_check
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_mode_Charge_Ctrl
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Ntc_Adjust_Process
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normal_mode_Charge_Ctrl
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_AutoOff_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_app.o(.data.Task_Arr)
</UL>
<P><STRONG><a name="[7a]"></a>Sys_state_Ctrl</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, device_app.o(.text.Sys_state_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Sys_state_Ctrl &rArr; Device_Data_Write &rArr; Adc_ReInit &rArr; Adc_Config &rArr; Delay_ms &rArr; Delay_us &rArr; timer_counter_read
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_to_err_state
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Charge_Control
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Data_Write
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Control
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPower_CallBack
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_temp_err_check
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_val_err_check
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_mode_Charge_Ctrl
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Normal_mode_Charge_Ctrl
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_AutoOff_Process
</UL>

<P><STRONG><a name="[23]"></a>SystemInit</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, system_gd32e23x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SystemInit &rArr; system_clock_config &rArr; system_clock_72m_irc8m
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>Temp_ctrl_RF_time</STRONG> (Thumb, 492 bytes, Stack size 4 bytes, device_app.o(.text.Temp_ctrl_RF_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Temp_ctrl_RF_time
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Device_Out_Process
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Out_Process
</UL>

<P><STRONG><a name="[b5]"></a>Test_Mode_Device_Out_Process</STRONG> (Thumb, 816 bytes, Stack size 48 bytes, test_app.o(.text.Test_Mode_Device_Out_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Test_Mode_Device_Out_Process &rArr; test_ems_rf_ctrl &rArr; RF_Control &rArr; RF_PWM_Config &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_ctrl_RF_time
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Start_Time
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Data_Write
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_ems_rf_ctrl
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Control
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Control
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out_Task1
</UL>

<P><STRONG><a name="[b0]"></a>Test_Order_Process</STRONG> (Thumb, 1628 bytes, Stack size 176 bytes, test_app.o(.text.Test_Order_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = Test_Order_Process &rArr; Device_Data_Write &rArr; Adc_ReInit &rArr; Adc_Config &rArr; Delay_ms &rArr; Delay_us &rArr; timer_counter_read
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_compute
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_Send
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Data_Write
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Low_Control
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Full_Control
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Control
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Listen_Task0
</UL>

<P><STRONG><a name="[ca]"></a>Test_mode_Charge_Ctrl</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, device_app.o(.text.Test_mode_Charge_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Test_mode_Charge_Ctrl &rArr; Sys_state_Ctrl &rArr; Device_Data_Write &rArr; Adc_ReInit &rArr; Adc_Config &rArr; Delay_ms &rArr; Delay_us &rArr; timer_counter_read
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Charge_Control
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_state_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Task2
</UL>

<P><STRONG><a name="[1e]"></a>USART0_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, drv_uart.o(.text.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART0_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_get
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e23x.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>adc_calibration_enable</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, gd32e23x_adc.o(.text.adc_calibration_enable))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Config
</UL>

<P><STRONG><a name="[45]"></a>adc_channel_length_config</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, gd32e23x_adc.o(.text.adc_channel_length_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_channel_length_config
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Config
</UL>

<P><STRONG><a name="[44]"></a>adc_data_alignment_config</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, gd32e23x_adc.o(.text.adc_data_alignment_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_data_alignment_config
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Config
</UL>

<P><STRONG><a name="[4f]"></a>adc_deinit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gd32e23x_adc.o(.text.adc_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = adc_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_DeInit
</UL>

<P><STRONG><a name="[4c]"></a>adc_dma_mode_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e23x_adc.o(.text.adc_dma_mode_enable))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Config
</UL>

<P><STRONG><a name="[49]"></a>adc_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32e23x_adc.o(.text.adc_enable))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Config
</UL>

<P><STRONG><a name="[48]"></a>adc_external_trigger_config</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, gd32e23x_adc.o(.text.adc_external_trigger_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_external_trigger_config
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Config
</UL>

<P><STRONG><a name="[47]"></a>adc_external_trigger_source_config</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, gd32e23x_adc.o(.text.adc_external_trigger_source_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_external_trigger_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Config
</UL>

<P><STRONG><a name="[46]"></a>adc_regular_channel_config</STRONG> (Thumb, 348 bytes, Stack size 36 bytes, gd32e23x_adc.o(.text.adc_regular_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = adc_regular_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Config
</UL>

<P><STRONG><a name="[4d]"></a>adc_software_trigger_enable</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, gd32e23x_adc.o(.text.adc_software_trigger_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_software_trigger_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Config
</UL>

<P><STRONG><a name="[43]"></a>adc_special_function_config</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, gd32e23x_adc.o(.text.adc_special_function_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_special_function_config
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Config
</UL>

<P><STRONG><a name="[cb]"></a>bat_val_err_check</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, err_check_app.o(.text.bat_val_err_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = bat_val_err_check &rArr; Sys_state_Ctrl &rArr; Device_Data_Write &rArr; Adc_ReInit &rArr; Adc_Config &rArr; Delay_ms &rArr; Delay_us &rArr; timer_counter_read
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_state_Ctrl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Task2
</UL>

<P><STRONG><a name="[cd]"></a>change_to_err_state</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, device_app.o(.text.change_to_err_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = change_to_err_state &rArr; Motor_Start_Time &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Start_Time
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_counter_reload
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_state_Ctrl
</UL>

<P><STRONG><a name="[c3]"></a>crc16_compute</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, test_app.o(.text.crc16_compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16_compute
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Order_Process
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Ntc_Adjust_Process
</UL>

<P><STRONG><a name="[d4]"></a>dma_channel_disable</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, gd32e23x_dma.o(.text.dma_channel_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_channel_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>dma_channel_enable</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, gd32e23x_dma.o(.text.dma_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Dma_Config
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_DMA_Config
</UL>

<P><STRONG><a name="[8a]"></a>dma_circulation_disable</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, gd32e23x_dma.o(.text.dma_circulation_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_circulation_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_DMA_Config
</UL>

<P><STRONG><a name="[53]"></a>dma_circulation_enable</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, gd32e23x_dma.o(.text.dma_circulation_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_circulation_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Dma_Config
</UL>

<P><STRONG><a name="[50]"></a>dma_deinit</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, gd32e23x_dma.o(.text.dma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dma_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_DeInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Dma_Config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_DMA_Config
</UL>

<P><STRONG><a name="[52]"></a>dma_init</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, gd32e23x_dma.o(.text.dma_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = dma_init &rArr; dma_channel_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Dma_Config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_DMA_Config
</UL>

<P><STRONG><a name="[d5]"></a>dma_transfer_number_config</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gd32e23x_dma.o(.text.dma_transfer_number_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_transfer_number_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>dma_transfer_number_get</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gd32e23x_dma.o(.text.dma_transfer_number_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = dma_transfer_number_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>ems_rf_en_change</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drv_ems_rf_en_pin.o(.text.ems_rf_en_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ems_rf_en_change &rArr; timer_channel_output_pulse_value_config
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Control
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Control
</UL>

<P><STRONG><a name="[a0]"></a>fmc_flag_clear</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, gd32e23x_fmc.o(.text.fmc_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Word
</UL>

<P><STRONG><a name="[a3]"></a>fmc_lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32e23x_fmc.o(.text.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Word
</UL>

<P><STRONG><a name="[a1]"></a>fmc_page_erase</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gd32e23x_fmc.o(.text.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fmc_page_erase &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Word
</UL>

<P><STRONG><a name="[d8]"></a>fmc_ready_wait</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gd32e23x_fmc.o(.text.fmc_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[d9]"></a>fmc_state_get</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, gd32e23x_fmc.o(.text.fmc_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>

<P><STRONG><a name="[9f]"></a>fmc_unlock</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32e23x_fmc.o(.text.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Word
</UL>

<P><STRONG><a name="[a2]"></a>fmc_word_program</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, gd32e23x_fmc.o(.text.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Word
</UL>

<P><STRONG><a name="[29]"></a>fputc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, drv_uart.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fputc &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[de]"></a>fwdgt_config</STRONG> (Thumb, 232 bytes, Stack size 36 bytes, gd32e23x_fwdgt.o(.text.fwdgt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fwdgt_config
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>fwdgt_counter_reload</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32e23x_fwdgt.o(.text.fwdgt_counter_reload))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_to_err_state
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Task2
</UL>

<P><STRONG><a name="[df]"></a>fwdgt_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e23x_fwdgt.o(.text.fwdgt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>gpio_af_set</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, gd32e23x_gpio.o(.text.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PWM_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_PWM_Config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_GPIO_Config
</UL>

<P><STRONG><a name="[5a]"></a>gpio_bit_write</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, gd32e23x_gpio.o(.text.gpio_bit_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_leds_disp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_Err_leds_disp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aging_charge_disp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aging_EMS_RF_disp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Charge_Control
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_Leds_Force_refresh
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_state_Ctrl
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_Leds_Control
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPower_CallBack
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Start_Time
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Order_Process
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Process_Cycle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_AutoOff_Process
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PWM_OFF
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_PWM_OFF
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Reset
</UL>

<P><STRONG><a name="[c5]"></a>gpio_input_bit_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gd32e23x_gpio.o(.text.gpio_input_bit_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_KeyPower_Level
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorPPR_Read
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorCharge_Read
</UL>

<P><STRONG><a name="[56]"></a>gpio_mode_set</STRONG> (Thumb, 144 bytes, Stack size 28 bytes, gd32e23x_gpio.o(.text.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Hardware_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PWM_OFF
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PWM_Config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_PWM_OFF
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_PWM_Config
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Gpio_Config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_GPIO_Config
</UL>

<P><STRONG><a name="[61]"></a>gpio_output_options_set</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, gd32e23x_gpio.o(.text.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PWM_OFF
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PWM_Config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_PWM_OFF
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_PWM_Config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_GPIO_Config
</UL>

<P><STRONG><a name="[22]"></a>main</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = main &rArr; Drv_Uart_Init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_enable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_config
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Hardware_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_system_clock_to_72m_irc8m
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irc40k_config
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_App_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[98]"></a>nvic_irq_enable</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, gd32e23x_misc.o(.text.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nvic_irq_enable &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_NVIC_Config
</UL>

<P><STRONG><a name="[cf]"></a>nvic_vector_table_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gd32e23x_misc.o(.text.nvic_vector_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvic_vector_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[41]"></a>rcu_adc_clock_config</STRONG> (Thumb, 396 bytes, Stack size 16 bytes, gd32e23x_rcu.o(.text.rcu_adc_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcu_adc_clock_config
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Clock_Config
</UL>

<P><STRONG><a name="[ea]"></a>rcu_clock_freq_get</STRONG> (Thumb, 768 bytes, Stack size 112 bytes, gd32e23x_rcu.o(.text.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[e7]"></a>rcu_deinit</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, gd32e23x_rcu.o(.text.rcu_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_system_clock_to_72m_irc8m
</UL>

<P><STRONG><a name="[e5]"></a>rcu_flag_get</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gd32e23x_rcu.o(.text.rcu_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
</UL>

<P><STRONG><a name="[db]"></a>rcu_osci_on</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gd32e23x_rcu.o(.text.rcu_osci_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rcu_osci_on
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irc40k_config
</UL>

<P><STRONG><a name="[dc]"></a>rcu_osci_stab_wait</STRONG> (Thumb, 600 bytes, Stack size 56 bytes, gd32e23x_rcu.o(.text.rcu_osci_stab_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rcu_osci_stab_wait &rArr; rcu_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irc40k_config
</UL>

<P><STRONG><a name="[40]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gd32e23x_rcu.o(.text.rcu_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Hardware_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Gpio_Config
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Clock_Config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_GPIO_Config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_DMA_Config
</UL>

<P><STRONG><a name="[d7]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gd32e23x_rcu.o(.text.rcu_periph_reset_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[d6]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, gd32e23x_rcu.o(.text.rcu_periph_reset_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_deinit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[e6]"></a>rcu_system_clock_source_config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gd32e23x_rcu.o(.text.rcu_system_clock_source_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_system_clock_source_config
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_system_clock_to_72m_irc8m
</UL>

<P><STRONG><a name="[cc]"></a>rf_temp_err_check</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, err_check_app.o(.text.rf_temp_err_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rf_temp_err_check &rArr; Sys_state_Ctrl &rArr; Device_Data_Write &rArr; Adc_ReInit &rArr; Adc_Config &rArr; Delay_ms &rArr; Delay_us &rArr; timer_counter_read
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_state_Ctrl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Task2
</UL>

<P><STRONG><a name="[e9]"></a>systick_clksource_set</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, gd32e23x_misc.o(.text.systick_clksource_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = systick_clksource_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[e2]"></a>timer15_init</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, drv_ems_rf_en_pin.o(.text.timer15_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = timer15_init &rArr; timer_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_struct_para_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_struct_para_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32e23x_timer.o(.text.timer_auto_reload_shadow_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_auto_reload_shadow_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PWM_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_PWM_Config
</UL>

<P><STRONG><a name="[67]"></a>timer_channel_output_config</STRONG> (Thumb, 756 bytes, Stack size 16 bytes, gd32e23x_timer.o(.text.timer_channel_output_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_channel_output_config
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PWM_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_PWM_Config
</UL>

<P><STRONG><a name="[68]"></a>timer_channel_output_mode_config</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, gd32e23x_timer.o(.text.timer_channel_output_mode_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_channel_output_mode_config
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PWM_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_PWM_Config
</UL>

<P><STRONG><a name="[5f]"></a>timer_channel_output_pulse_value_config</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, gd32e23x_timer.o(.text.timer_channel_output_pulse_value_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_channel_output_pulse_value_config
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Low_Breathe
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Full_Breathe
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Low_Control
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Full_Control
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PWM_Config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ems_rf_en_change
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_PWM_Config
</UL>

<P><STRONG><a name="[69]"></a>timer_channel_output_shadow_config</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, gd32e23x_timer.o(.text.timer_channel_output_shadow_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_channel_output_shadow_config
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PWM_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_PWM_Config
</UL>

<P><STRONG><a name="[66]"></a>timer_channel_output_struct_para_init</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, gd32e23x_timer.o(.text.timer_channel_output_struct_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_channel_output_struct_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PWM_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_PWM_Config
</UL>

<P><STRONG><a name="[78]"></a>timer_counter_read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32e23x_timer.o(.text.timer_counter_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_counter_read
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>

<P><STRONG><a name="[63]"></a>timer_deinit</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, gd32e23x_timer.o(.text.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = timer_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PWM_OFF
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_PWM_OFF
</UL>

<P><STRONG><a name="[6b]"></a>timer_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32e23x_timer.o(.text.timer_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PWM_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_PWM_Config
</UL>

<P><STRONG><a name="[65]"></a>timer_init</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, gd32e23x_timer.o(.text.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PWM_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_PWM_Config
</UL>

<P><STRONG><a name="[76]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gd32e23x_timer.o(.text.timer_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>

<P><STRONG><a name="[9e]"></a>timer_primary_output_config</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gd32e23x_timer.o(.text.timer_primary_output_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_primary_output_config
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PWM_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_PWM_Config
</UL>

<P><STRONG><a name="[64]"></a>timer_struct_para_init</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, gd32e23x_timer.o(.text.timer_struct_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_struct_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer15_init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PWM_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_PWM_Config
</UL>

<P><STRONG><a name="[8f]"></a>usart_baudrate_set</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, gd32e23x_usart.o(.text.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_Init
</UL>

<P><STRONG><a name="[9a]"></a>usart_data_transmit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gd32e23x_usart.o(.text.usart_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_Send
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[8e]"></a>usart_deinit</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gd32e23x_usart.o(.text.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usart_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_Init
</UL>

<P><STRONG><a name="[92]"></a>usart_dma_receive_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32e23x_usart.o(.text.usart_dma_receive_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_dma_receive_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_Init
</UL>

<P><STRONG><a name="[93]"></a>usart_dma_transmit_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32e23x_usart.o(.text.usart_dma_transmit_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_dma_transmit_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_Init
</UL>

<P><STRONG><a name="[94]"></a>usart_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32e23x_usart.o(.text.usart_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_Init
</UL>

<P><STRONG><a name="[96]"></a>usart_flag_clear</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32e23x_usart.o(.text.usart_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_Init
</UL>

<P><STRONG><a name="[95]"></a>usart_flag_get</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, gd32e23x_usart.o(.text.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_Send
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[97]"></a>usart_interrupt_enable</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gd32e23x_usart.o(.text.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_Init
</UL>

<P><STRONG><a name="[d2]"></a>usart_interrupt_flag_clear</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gd32e23x_usart.o(.text.usart_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 102 bytes, Stack size 28 bytes, gd32e23x_usart.o(.text.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>usart_receive_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32e23x_usart.o(.text.usart_receive_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_receive_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_Init
</UL>

<P><STRONG><a name="[91]"></a>usart_transmit_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32e23x_usart.o(.text.usart_transmit_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_transmit_config
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_Init
</UL>

<P><STRONG><a name="[eb]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[107]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[108]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[109]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[7e]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_to_err_state
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPower_CallBack
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Data_Read
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_temp_err_check
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_val_err_check
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Device_Out_Process
</UL>

<P><STRONG><a name="[3c]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[ed]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[ee]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[ef]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[f1]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[10a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[10b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[10c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[f7]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[74]"></a>log</STRONG> (Thumb, 790 bytes, Stack size 80 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = log &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Temp_Read
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d0]"></a>test_ems_rf_ctrl</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, test_app.o(.text.test_ems_rf_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = test_ems_rf_ctrl &rArr; RF_Control &rArr; RF_PWM_Config &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Control
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ems_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Mode_Device_Out_Process
</UL>

<P><STRONG><a name="[26]"></a>KeyPower_CallBack</STRONG> (Thumb, 580 bytes, Stack size 40 bytes, key_app.o(.text.KeyPower_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = KeyPower_CallBack &rArr; Sys_state_Ctrl &rArr; Device_Data_Write &rArr; Adc_ReInit &rArr; Adc_Config &rArr; Delay_ms &rArr; Delay_us &rArr; timer_counter_read
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_state_Ctrl
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_Leds_Control
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Level_Set
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Start_Time
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_app.o(.text.Key_App_Init)
</UL>
<P><STRONG><a name="[c7]"></a>SysTick_Config</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, main.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[c8]"></a>__NVIC_SetPriority</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, main.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[da]"></a>irc40k_config</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text.irc40k_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = irc40k_config &rArr; rcu_osci_stab_wait &rArr; rcu_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_on
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>switch_system_clock_to_72m_irc8m</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, main.o(.text.switch_system_clock_to_72m_irc8m))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = switch_system_clock_to_72m_irc8m &rArr; rcu_system_clock_source_config
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_system_clock_source_config
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>systick_config</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(.text.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = systick_config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_clksource_set
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>Aging_EMS_RF_disp</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, led_app.o(.text.Aging_EMS_RF_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Aging_EMS_RF_disp &rArr; Bat_Led_Low_Control &rArr; timer_channel_output_pulse_value_config
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Low_Control
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Full_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_Aging_disp
</UL>

<P><STRONG><a name="[5d]"></a>Aging_charge_disp</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, led_app.o(.text.Aging_charge_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Aging_charge_disp &rArr; Bat_Led_Low_Control &rArr; timer_channel_output_pulse_value_config
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Low_Control
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Full_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_Aging_disp
</UL>

<P><STRONG><a name="[bc]"></a>sys_Err_leds_disp</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, led_app.o(.text.sys_Err_leds_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sys_Err_leds_disp &rArr; Bat_Led_Low_Control &rArr; timer_channel_output_pulse_value_config
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Low_Control
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Full_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Led_Process
</UL>

<P><STRONG><a name="[ba]"></a>sys_charge_bat_leds_disp</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, led_app.o(.text.sys_charge_bat_leds_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sys_charge_bat_leds_disp &rArr; Bat_Led_Low_Control &rArr; timer_channel_output_pulse_value_config
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Low_Breathe
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Full_Breathe
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Low_Control
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Full_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Led_Process
</UL>

<P><STRONG><a name="[bb]"></a>sys_off_bat_leds_disp</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, led_app.o(.text.sys_off_bat_leds_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = sys_off_bat_leds_disp &rArr; Level_Leds_Control &rArr; Level_Leds_Force_refresh &rArr; gpio_bit_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Level_Leds_Control
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Low_Control
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Full_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Led_Process
</UL>

<P><STRONG><a name="[b8]"></a>sys_on_bat_leds_disp</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, led_app.o(.text.sys_on_bat_leds_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sys_on_bat_leds_disp &rArr; Bat_Led_Low_Control &rArr; timer_channel_output_pulse_value_config
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Low_Breathe
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Low_Control
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Full_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Led_Process
</UL>

<P><STRONG><a name="[b9]"></a>sys_wakeup_bat_leds_disp</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, led_app.o(.text.sys_wakeup_bat_leds_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sys_wakeup_bat_leds_disp &rArr; Bat_Led_Low_Control &rArr; timer_channel_output_pulse_value_config
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Low_Control
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Full_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Led_Process
</UL>

<P><STRONG><a name="[be]"></a>test_Aging_disp</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, led_app.o(.text.test_Aging_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = test_Aging_disp &rArr; test_leds_disp &rArr; Bat_Led_Low_Control &rArr; timer_channel_output_pulse_value_config
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_leds_disp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aging_charge_disp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aging_EMS_RF_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Led_Process
</UL>

<P><STRONG><a name="[bd]"></a>test_leds_disp</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, led_app.o(.text.test_leds_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = test_leds_disp &rArr; Bat_Led_Low_Control &rArr; timer_channel_output_pulse_value_config
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Low_Control
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Led_Full_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_Aging_disp
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Led_Process
</UL>

<P><STRONG><a name="[a9]"></a>Add_Key</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, drv_key.o(.text.Add_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Add_Key
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Create
</UL>

<P><STRONG><a name="[6e]"></a>bat_val_3v2_check</STRONG> (Thumb, 176 bytes, Stack size 4 bytes, drv_power.o(.text.bat_val_3v2_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bat_val_3v2_check
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Level_Detection
</UL>

<P><STRONG><a name="[6f]"></a>bat_val_3v3_check</STRONG> (Thumb, 180 bytes, Stack size 4 bytes, drv_power.o(.text.bat_val_3v3_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bat_val_3v3_check
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Level_Detection
</UL>

<P><STRONG><a name="[70]"></a>bat_val_3v4_check</STRONG> (Thumb, 180 bytes, Stack size 4 bytes, drv_power.o(.text.bat_val_3v4_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bat_val_3v4_check
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Level_Detection
</UL>

<P><STRONG><a name="[71]"></a>bat_val_3v9_check</STRONG> (Thumb, 180 bytes, Stack size 4 bytes, drv_power.o(.text.bat_val_3v9_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bat_val_3v9_check
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Level_Detection
</UL>

<P><STRONG><a name="[72]"></a>bat_val_4v1_check</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, drv_power.o(.text.bat_val_4v1_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bat_val_4v1_check
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bat_Level_Detection
</UL>

<P><STRONG><a name="[89]"></a>Drv_Uart_DMA_Config</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, drv_uart.o(.text.Drv_Uart_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Drv_Uart_DMA_Config &rArr; dma_init &rArr; dma_channel_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_Init
</UL>

<P><STRONG><a name="[8b]"></a>Drv_Uart_GPIO_Config</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, drv_uart.o(.text.Drv_Uart_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Drv_Uart_GPIO_Config &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_Init
</UL>

<P><STRONG><a name="[8d]"></a>Drv_Uart_NVIC_Config</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, drv_uart.o(.text.Drv_Uart_NVIC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Drv_Uart_NVIC_Config &rArr; nvic_irq_enable &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drv_Uart_Init
</UL>

<P><STRONG><a name="[e4]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, gd32e23x_misc.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[e3]"></a>__NVIC_SetPriority</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, gd32e23x_misc.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[e8]"></a>system_clock_72m_irc8m</STRONG> (Thumb, 224 bytes, Stack size 12 bytes, system_gd32e23x.o(.text.system_clock_72m_irc8m))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = system_clock_72m_irc8m
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[ce]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32e23x.o(.text.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = system_clock_config &rArr; system_clock_72m_irc8m
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_72m_irc8m
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[f2]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ec]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[f5]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f4]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
