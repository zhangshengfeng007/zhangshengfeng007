C51 COMPILER V9.60.7.0   FAN                                                               04/16/2024 15:41:19 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE FAN
OBJECT MODULE PLACED IN .\Objects\fan.obj
COMPILER INVOKED BY: F:\tool_start\keil_c51\C51\BIN\C51.EXE ..\App\fan.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\App\inc;..\D
                    -river\inc) DEBUG OBJECTEXTEND PRINT(.\Listings\fan.lst) TABS(2) OBJECT(.\Objects\fan.obj)

line level    source

   1          #include "fan.h"
   2          
   3          #define   ROTATESLEEPKEEPTIME   (60000/20)
   4          
   5          xdata xFanStatus_t_ xFanStatus = {0};
   6          
   7          #define   FANMAXCURRENT   400
   8          #define   FANMINCURRENT   50
   9          
  10          void Fan_Handler(void)
  11          {
  12   1        //uint8_t i;
  13   1        
  14   1        //风扇异常测试
  15   1      //    if(b_FightLighTouchFanBusy_Get()){
  16   1      //      xFanStatus.ul_fanTestTimeCnt = 0;
  17   1      //      xFanStatus.ul_RotateCntBuff = 0;
  18   1      //    }
  19   1        
  20   1        if(ErrorType_Get()&(~ERROR_TYPE_FAN))
  21   1          return;
  22   1        if(BurninEntering()||b_BurninFlag_Get())
  23   1          return;
  24   1        
  25   1        #if 1
  26   1        if(!b_ChargeBusy_Get())
  27   1        {
  28   2          if(vrefunstableflag || b_FightLighTouchFanBusy_Get())return;
  29   2          //for(i=0;i<3;i++)
  30   2      //      xFanStatus.ul_fanadcbuff = Get_ADC_Value(ADCChannelFAN);
  31   2      //    xFanStatus.ul_fanadcvalue = (uint16_t)((xFanStatus.ul_fanadcbuff) * ADCREFRATIO/4096.0);
  32   2      //    xFanStatus.ul_fanadcbuff = 0;
  33   2          xFanStatus.ul_fanadcbuff = Get_ADC_Value(ADCChannelFAN);
  34   2          xFanStatus.ul_fanadcvalue = (uint16_t)((xFanStatus.ul_fanadcbuff) * 125.0/128.0);
  35   2          xFanStatus.ul_fanadcbuff = 0;
  36   2          #if 1
  37   2          if(((b_DetInitFlag_Get()==DETECTIVE_INIT_FINISH) || (ErrorType_Get()&ERROR_TYPE_FAN)) )
  38   2          {
  39   3            if(xFanStatus.ul_fanadcvalue<FANMINCURRENT || xFanStatus.ul_fanadcvalue>FANMAXCURRENT)
  40   3            {
  41   4              xFanStatus.uc_RotateAbnormalTimes++;
  42   4              xFanStatus.uc_RotateNormalTimes = 0;
  43   4              if(xFanStatus.uc_RotateAbnormalTimes>=50){
  44   5                xFanStatus.uc_RotateAbnormalTimes = 0;
  45   5                xFanStatus.b_RotateErrorFlag = true;
  46   5                ErrorType_Set(ERROR_TYPE_FAN);
  47   5                //关机
  48   5                PowerOnOff_Set(0);
  49   5                b_SleepMode_Set(SLEEP_MODE_WAKE);
  50   5                FightLightReset();
  51   5              }
  52   4              //PA1 = 0;
  53   4            }
  54   3            else{   //5s自动退出(测试)
C51 COMPILER V9.60.7.0   FAN                                                               04/16/2024 15:41:19 PAGE 2   

  55   4              xFanStatus.uc_RotateNormalTimes++;
  56   4              xFanStatus.uc_RotateAbnormalTimes = 0;
  57   4              if(xFanStatus.uc_RotateNormalTimes>=50){
  58   5                xFanStatus.uc_RotateNormalTimes = 0;
  59   5                if(xFanStatus.b_RotateErrorFlag){
  60   6                  ErrorType_Reset(ERROR_TYPE_FAN);
  61   6                  if(uc_Level_Get()){
  62   7                    PowerOnOff_Set(1);
  63   7                    b_IsPowerOnFlag_Set(1);
  64   7                    reset_led_event(LED_EVENT_OFF);
  65   7                    set_led_event(LED_EVENT_MODE);
  66   7                  }
  67   6                }
  68   5                xFanStatus.b_RotateErrorFlag = false;
  69   5                //PA1 = 1;
  70   5              }
  71   4            }
  72   3          }
  73   2          #endif
  74   2        }
  75   1        #endif
  76   1        //关机运行时间
  77   1        if(xFanStatus.b_RotateKeepworkFlag==FAN_OFF)
  78   1          xFanStatus.ul_RotateKeepworkCnt++;
  79   1        else
  80   1          xFanStatus.ul_RotateKeepworkCnt=0;
  81   1        //休眠判断
  82   1        if(xFanStatus.ul_RotateKeepworkCnt > ROTATESLEEPKEEPTIME){
  83   2          xFanStatus.b_RotateKeepworkFlag = FAN_BOOT;
  84   2          FAN_OFF();
  85   2        }
  86   1      }
  87          
  88          
  89          
  90          void FanWork_Cb(void)
  91          {
  92   1        if(xFanStatus.b_halfspeedflag)
  93   1        {
  94   2          if(xFanStatus.uc_half_worktime_count++ == 3)FAN = 1;
  95   2          else if(xFanStatus.uc_half_worktime_count == 10){FAN = 0;xFanStatus.uc_half_worktime_count = 0;}
  96   2        }
  97   1      }
  98          
  99          
 100          void Fan_Init(void)
 101          {
 102   1        
 103   1      }
 104          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    358    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     12    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
