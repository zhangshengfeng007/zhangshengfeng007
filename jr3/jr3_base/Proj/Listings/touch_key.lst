C51 COMPILER V9.60.7.0   TOUCH_KEY                                                         04/16/2024 15:41:19 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE TOUCH_KEY
OBJECT MODULE PLACED IN .\Objects\touch_key.obj
COMPILER INVOKED BY: F:\tool_start\keil_c51\C51\BIN\C51.EXE ..\App\touch_key.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\App\in
                    -c;..\Driver\inc) DEBUG OBJECTEXTEND PRINT(.\Listings\touch_key.lst) TABS(2) OBJECT(.\Objects\touch_key.obj)

line level    source

   1          #include "touch_key.h"
   2          
   3          xTKStatus_t sx_TKStatus = {0};
   4          
   5          void Touch_Key_Handler(void)
   6          {
   7   1        uint8_t i=0,j=0xff,k=0;
   8   1        uint8_t iic_data;
   9   1        
  10   1        if(ErrorType_Get()/*&(ERROR_TYPE_VOLTAGE|ERROR_TYPE_SUPPLY)*/)
  11   1          return;
  12   1        
  13   1        if(BurninEntering() || b_BurninFlag_Get())
  14   1          return;
  15   1        
  16   1      
  17   1        if(vrefunstableflag)return;
  18   1        
  19   1        iic_data = IIC_Test();
  20   1      
  21   1        #if 0
                if(b_OnOffFlag_Get()){
                  for(i=0x01,j=0;i!=0x40;i<<1,j++)    //模式键
                  {
                    if(sx_TKStatus.ucTKValue&i){
                      uc_Mode_Set(j);
                      uc_LevelSum_Set(uc_Mode_Get()+6*(uc_Level_Get()-1));
                      set_led_event(LED_EVENT_MODE);
                      break;
                    }
                  }
                  if(sx_TKStatus.ucTKValue&0x40){     //自动打光键
                    b_AutoSwitchFlag_Set(!b_AutoSwitchFlag_Get());
                    set_led_event(LED_EVENT_AUTO);
                  }
                }
                #else
  38   1        switch(iic_data)
  39   1        {
  40   2          case 0x04:j=3;break;
  41   2          case 0x01:j=5;break;
  42   2          case 0x20:j=1;break;
  43   2          case 0x10:j=0;break;
  44   2          case 0x40:j=2;break;
  45   2          case 0x02:    /* 自动打光键 */
  46   2          {
  47   3            if(!sx_TKStatus.bTKPressFlag)
  48   3            {
  49   4              if(++sx_TKStatus.bTKAutoScanCnt==5)
  50   4              {
  51   5                sx_TKStatus.bTKAutoScanCnt = 0;
  52   5                sx_TKStatus.bTKPressFlag = true;
  53   5                if(b_OnOffFlag_Get()){
  54   6                  b_AutoSwitchFlag_Set(!b_AutoSwitchFlag_Get());
C51 COMPILER V9.60.7.0   TOUCH_KEY                                                         04/16/2024 15:41:19 PAGE 2   

  55   6                  set_led_event(LED_EVENT_AUTO);
  56   6                  ul_SleepModeCnt_Set(0);
  57   6                }
  58   5          //        else if(b_SleepMode_Get()==SLEEP_MODE_SLEEP){
  59   5          //          PowerOnOff_Set(1);
  60   5          //          set_led_event(LED_EVENT_MODE);
  61   5          //        }
  62   5              }
  63   4            }
  64   3          }
  65   2          return;
  66   2          case 0x08:j=4;break;
  67   2          case 0xff:
  68   2          {
  69   3            sx_TKStatus.bTKPressFlag = false;
  70   3            sx_TKStatus.bTKAutoScanCnt = 0;
  71   3          }return;
  72   2          default:j=0xff;break;
  73   2        }
  74   1      
  75   1        if(j<6 && sx_TKStatus.ucTKCode!=iic_data){    //模式键
  76   2          if(++sx_TKStatus.bTKModeScanCnt==2){
  77   3            sx_TKStatus.bTKModeScanCnt = 0;
  78   3            if(b_OnOffFlag_Get()/* || b_SleepMode_Get()==SLEEP_MODE_SLEEP*/){
  79   4              uc_Mode_Set(j);
  80   4              uc_LevelSum_Set(uc_Mode_Get()+6*(uc_Level_Get()-1));
  81   4              set_led_event(LED_EVENT_MODE);
  82   4              sx_TKStatus.ucTKCode = iic_data;
  83   4              ul_SleepModeCnt_Set(0);
  84   4            }
  85   3      //      if(b_SleepMode_Get()==SLEEP_MODE_SLEEP)
  86   3      //        PowerOnOff_Set(1);
  87   3          }
  88   2        }else
  89   1          sx_TKStatus.bTKModeScanCnt = 0;
  90   1      //  if(j==7)
  91   1      //    sx_TKStatus.bTKPressFlag = false;
  92   1        sx_TKStatus.bTKAutoScanCnt = 0;
  93   1      //  if(j==6)    //自动打光键
  94   1      //  {
  95   1      //    if(!sx_TKStatus.bTKPressFlag)
  96   1      //    {
  97   1      //      if(++sx_TKStatus.bTKAutoScanCnt==5)
  98   1      //      {
  99   1      //        sx_TKStatus.bTKAutoScanCnt = 0;
 100   1      //        sx_TKStatus.bTKPressFlag = true;
 101   1      //        if(b_OnOffFlag_Get()){
 102   1      //          b_AutoSwitchFlag_Set(!b_AutoSwitchFlag_Get());
 103   1      //          set_led_event(LED_EVENT_AUTO);
 104   1      //          ul_SleepModeCnt_Set(0);
 105   1      //        }
 106   1      //  //        else if(b_SleepMode_Get()==SLEEP_MODE_SLEEP){
 107   1      //  //          PowerOnOff_Set(1);
 108   1      //  //          set_led_event(LED_EVENT_MODE);
 109   1      //  //        }
 110   1      //      }
 111   1      //    }
 112   1      //  }else
 113   1      //    sx_TKStatus.bTKAutoScanCnt = 0;
 114   1        
 115   1        
 116   1        
C51 COMPILER V9.60.7.0   TOUCH_KEY                                                         04/16/2024 15:41:19 PAGE 3   

 117   1        #endif
 118   1        
 119   1      }
 120          
 121          
 122          
 123          
 124          void Touch_Key_Init(void)
 125          {
 126   1        IIC_Init();
 127   1        IIC_Test();
 128   1      }
 129          
 130          
 131          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    300    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
